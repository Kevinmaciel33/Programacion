
#include "Pila.h"

void crearPila (t_pila *p)
{
    p->tope = TAMPILA;
}

int pilaVacia (const t_pila *p)
{
    return p->tope == TAMPILA;
}

void vaciarPila (t_pila *p)
{
    p->tope = TAMPILA;
}

int pilaLlena (const t_pila *p, unsigned cantBytes)
{
    return (sizeof(unsigned)+cantBytes) > p->tope;
}

int ponerEnPila (t_pila *p, const void *dato, unsigned cantBytes)
{
    if ((sizeof(unsigned)+cantBytes) > p->tope)
        return 0; /// NO HAY LUGAR PARA ESTE DATO

    p->tope -= cantBytes;
    memcpy (p->pila + p->tope, dato, cantBytes);

    p->tope -= sizeof(unsigned);
    //memcpy (p->pila + p->tope, &cantBytes, sizeof(unsigned));
    *(unsigned *)(p->pila + p->tope) = cantBytes;

    return 1;
}

int sacarDePila (t_pila *p, void *dato, unsigned cantBytes)
{
    unsigned tamDatoPila;

    if (p->tope == TAMPILA)
        return 0; //PILA VACIA

        ///RECUPERO EL TAMAÃ‘O DEL DATO A LEER
    //memcpy (&tamDatoPila, p->pila + p->tope, sizeof(unsigned));
    tamDatoPila = *(unsigned *)(p->pila + p->tope);

        ///MOVER A TOPE AL COMIENZO DE LA INFO
    p->tope += sizeof(unsigned);

        ///RECUPERAR EL DATO A LEER
        ///SIEMPRE VA A SER LA MENOR CANT DE BYTES ENTRE tamDatoPila y cantBytes
    memcpy (dato, p->pila + p->tope, MINIMOBYTES(tamDatoPila, cantBytes));

        ///MOVER EL PUNTERO tamDatoPila
    p->tope += tamDatoPila;

    return 1;
}

int verTope (const t_pila *p, void *dato, unsigned cantBytes)
{
    unsigned tamDatoPila;

    if (p->tope == TAMPILA)
        return 0; ///PILA VACIA

    ///memcpy (&tamDatoPila, p->pila + p->tope, sizeof(unsigned));
    tamDatoPila = *(unsigned *)(p->pila + p->tope);

        ///RECUPERAR EL DATO A LEER
        ///SIEMPRE VA A SER LA MENOR CANT DE BYTES ENTRE tamDatoPila y cantBytes
    memcpy (dato, p->pila + p->tope + sizeof (unsigned),
            MINIMOBYTES(tamDatoPila, cantBytes));

    return 1;
}




int sumaNumPilas(const t_pila *p1, const t_pila *p2, t_pila *pr)
{
    if(pilaVacia(p1))
        return -1; //PILA 1 VACIA
    if(pilaVacia(p2))
        return -2; //PILA 2 VACIA

    char res[TAMNUM+1];

    if(pilaLlena(pr, sizeof(unsigned)+strlen(res)+1))
        return -3; //PILA RESULTADO "LLENA"

    char num1[TAMNUM];
    char num2[TAMNUM];

    if(!verTope(p1, num1, TAMNUM))
        return -11;

    printf("\n\t Num1: %-s", num1);

    if(!verTope(p2, num2, TAMNUM))
        return -11;

    printf("\n\t Num1: %-s \n", num2);

    int i, j, dig=0, sumDig=0, carry=0;
    int len1, len2;
    len1=strlen(num1)-1;
    len2=strlen(num2)-1;

    printf("\t dRes: ");
    //res+TAMNUM-2;
    for(i=0; i<=MINIMOBYTES(len1,len2); i++)
    {
        sumDig=(num1[len1-i]-48)+(num2[len2-i]-48);
        if( !ICARLY(sumDig) )
        {
            if(!carry)
                dig=sumDig;
            else
            {
                carry=0;
                dig= sumDig+1;
            }
        }
        else
        {
            carry=1;
            dig= sumDig-10;
        }
        res[TAMNUM-i-(TAMNUM-MINIMOBYTES(len1,len2))]= dig+48;
        //*res--= dig+48;


        printf("%d", dig);
        //printf("%c", res[TAMNUM-2-i]);
    }
    res[i]='\0';


    printf("\n\t i= %d \n\t cRes: ", i);
    for(j=0;j<i;j++)
        printf("%c", res[j]);


    printf("\n\t sRES: %-s", res);
    printf("\n\t CCCC: %c", *res);


    if(!ponerEnPila(pr, res, strlen(res)+1))
        printf("\n\n\t Se guardo en pr la cadena\n");

    //printf("\n\t sRes: %s", res[TAMNUM-i]);




    //printf("\n\t DIGITO: %d", dig);





    return 1;
}













